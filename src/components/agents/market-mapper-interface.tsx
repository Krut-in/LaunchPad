"use client";

import { useState, useCallback, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  MarketMapperInput,
  MarketMapperOutput,
} from "@/lib/agents/market-mapper";
import {
  CheckCircle,
  Circle,
  ArrowRight,
  RotateCcw,
  FileText,
  AlertCircle,
  Loader2,
} from "lucide-react";

/**
 * Represents a market validation question generated by the AI system
 * @interface Question
 */
interface Question {
  /** Unique identifier for the question */
  id: string;
  /** The actual question text to be displayed to the user */
  question: string;
  /** Category of the question for organizational purposes */
  type:
    | "target_customer"
    | "problem_definition"
    | "business_model"
    | "differentiation"
    | "market_scope"
    | "competitive_landscape"
    | "validation"
    | "strategy";
  /** Priority level determining question importance */
  priority: "critical" | "high" | "medium" | "low";
  /** Whether this question must be answered before proceeding */
  required: boolean;
  /** Additional context explaining why this question is important */
  context?: string;
  /** Related follow-up questions for deeper exploration */
  followUpQuestions?: string[];
  /** Whether this question is tailored to a specific industry */
  industrySpecific: boolean;
  /** Internal state tracking whether the user has provided an answer */
  answered?: boolean;
}

/**
 * Props for the MarketMapperInterface component
 * @interface MarketMapperInterfaceProps
 */
interface MarketMapperInterfaceProps {
  /** Callback function to trigger market analysis with user input */
  onAnalyze: (input: MarketMapperInput) => Promise<MarketMapperOutput>;
  /** Loading state from parent component */
  isLoading?: boolean;
  /** Previously saved form data for session restoration */
  savedFormData?: {
    businessIdea: string;
    industry?: string;
    targetMarket?: string;
    questions: Question[];
    answers: Record<string, string>;
  } | null;
}

/**
 * MarketMapperInterface - A comprehensive multi-step interface for market analysis
 *
 * This component implements Vercel's Web Interface Guidelines for:
 * - Full keyboard navigation and ARIA support
 * - Accessible form handling with proper validation
 * - Loading states and error management
 * - Mobile-optimized interactions
 *
 * @component
 * @param {MarketMapperInterfaceProps} props - Component properties
 * @returns {JSX.Element} The market mapper interface
 */
export function MarketMapperInterface({
  onAnalyze,
  isLoading = false,
  savedFormData,
}: MarketMapperInterfaceProps) {
  // Form state management with proper hydration safety
  const [businessIdea, setBusinessIdea] = useState(
    savedFormData?.businessIdea || ""
  );
  const [industry, setIndustry] = useState(savedFormData?.industry || "");
  const [targetMarket, setTargetMarket] = useState(
    savedFormData?.targetMarket || ""
  );

  // Multi-step flow state
  const [currentStep, setCurrentStep] = useState<
    "idea" | "questions" | "analysis"
  >(savedFormData?.questions ? "questions" : "idea");

  // Questions and answers state
  const [questions, setQuestions] = useState<Question[]>(
    savedFormData?.questions?.map(q => ({
      ...q,
      answered: !!savedFormData.answers[q.id],
    })) || []
  );
  const [answers, setAnswers] = useState<Record<string, string>>(
    savedFormData?.answers || {}
  );

  // Results and error state
  const [analysisResults, setAnalysisResults] =
    useState<MarketMapperOutput | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Loading state management
  const [isGeneratingQuestions, setIsGeneratingQuestions] = useState(false);
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  // Refs for focus management (WAI-ARIA APG requirement)
  const businessIdeaRef = useRef<HTMLTextAreaElement>(null);
  const firstErrorRef = useRef<HTMLDivElement>(null);
  const submitButtonRef = useRef<HTMLButtonElement>(null);

  /**
   * Announces messages to screen readers using aria-live regions
   * @param message - Message to announce
   */
  const announceToScreenReader = useCallback((message: string) => {
    const announcement = document.createElement("div");
    announcement.setAttribute("aria-live", "polite");
    announcement.setAttribute("aria-atomic", "true");
    announcement.setAttribute("class", "sr-only");
    announcement.textContent = message;

    document.body.appendChild(announcement);

    // Clean up after announcement
    setTimeout(() => {
      document.body.removeChild(announcement);
    }, 1000);
  }, []);


  /**
   * Handles the submission of business idea form
   * Implements proper validation, loading states, and error handling per Vercel guidelines
   */
  const handleIdeaSubmit = useCallback(async () => {
    // Trim and validate input (MUST: Don't block typing; accept free text and validate after)
    const trimmedIdea = businessIdea.trim();

    if (!trimmedIdea) {
      setError("Please describe your business idea");
      businessIdeaRef.current?.focus();
      return;
    }

    if (trimmedIdea.length < 10) {
      setError(
        "Business idea must be at least 10 characters for meaningful analysis"
      );
      businessIdeaRef.current?.focus();
      return;
    }

    // Clear previous errors and set loading state
    setError(null);
    setIsGeneratingQuestions(true);

    try {
      const input: MarketMapperInput = {
        businessIdea: trimmedIdea,
        industry: industry?.trim() || undefined,
        targetMarket: targetMarket?.trim() || undefined,
        processingMode: "questions",
        researchDepth: "basic",
        competitorLimit: 10,
        includeWebResearch: true,
        includeSentimentAnalysis: true,
      };

      const result = await onAnalyze(input);

      if (result.questions && result.questions.length > 0) {
        setQuestions(result.questions.map(q => ({ ...q, answered: false })));
        setCurrentStep("questions");

        // Announce success to screen readers (MUST: Use polite aria-live)
        announceToScreenReader(
          `Generated ${result.questions.length} questions for market validation`
        );
      } else {
        setError(
          "No questions were generated. This could be due to an unclear business idea. Please try refining your description or try again."
        );
        firstErrorRef.current?.focus();
      }
    } catch (error) {
      console.error("Error generating questions:", error);
      const errorMessage =
        error instanceof Error
          ? error.message
          : "Failed to generate questions. Please try again.";
      setError(errorMessage);

      // Focus first error for accessibility (MUST: on submit, focus first error)
      firstErrorRef.current?.focus();
    } finally {
      setIsGeneratingQuestions(false);
    }
  }, [businessIdea, industry, targetMarket, onAnalyze, announceToScreenReader]);

  /**
   * Handles answer changes with proper validation and state updates
   * @param questionId - Unique identifier for the question
   * @param answer - User's answer text
   */
  const handleAnswerChange = useCallback(
    (questionId: string, answer: string) => {
      // Update answers state with trimmed values (MUST: Trim values to handle text expansion trailing spaces)
      setAnswers(prev => ({ ...prev, [questionId]: answer }));

      // Mark question as answered based on content length
      setQuestions(prev =>
        prev.map(q =>
          q.id === questionId ? { ...q, answered: answer.trim().length > 0 } : q
        )
      );
    },
    []
  );

  /**
   * Handles the final analysis submission with comprehensive validation
   */
  const handleAnalyze = useCallback(async () => {
    // Validate required questions are answered
    const requiredQuestions = questions.filter(q => q.required);
    const unansweredRequired = requiredQuestions.filter(q => !q.answered);

    if (unansweredRequired.length > 0) {
      setError(
        `Please answer all required questions (${unansweredRequired.length} remaining)`
      );
      // Focus first unanswered required question
      const firstUnanswered = document.getElementById(
        `question-${unansweredRequired[0].id}`
      );
      firstUnanswered?.focus();
      return;
    }

    setError(null);
    setIsAnalyzing(true);

    try {
      const input: MarketMapperInput = {
        businessIdea: businessIdea.trim(),
        industry: industry?.trim() || undefined,
        targetMarket: targetMarket?.trim() || undefined,
        answers: Object.fromEntries(
          Object.entries(answers).map(([key, value]) => [key, value.trim()])
        ),
        processingMode: "deep_analysis",
        researchDepth: "comprehensive",
        competitorLimit: 10,
        includeWebResearch: true,
        includeSentimentAnalysis: true,
      };

      const result = await onAnalyze(input);
      setAnalysisResults(result);
      setCurrentStep("analysis");

      // Announce completion to screen readers
      announceToScreenReader("Market analysis completed successfully");
    } catch (error) {
      console.error("Error performing analysis:", error);
      const errorMessage =
        error instanceof Error
          ? error.message
          : "Failed to perform analysis. Please try again.";
      setError(errorMessage);

      // Focus error for accessibility
      firstErrorRef.current?.focus();
    } finally {
      setIsAnalyzing(false);
    }
  }, [
    businessIdea,
    industry,
    targetMarket,
    answers,
    questions,
    onAnalyze,
    announceToScreenReader,
  ]);

  /**
   * Handle keyboard navigation (MUST: Full keyboard support per WAI-ARIA APG)
   */
  const handleKeyDown = useCallback(
    (event: React.KeyboardEvent) => {
      // Enter key should submit when focused on textarea with Cmd/Ctrl
      if (event.key === "Enter" && (event.metaKey || event.ctrlKey)) {
        event.preventDefault();
        if (currentStep === "idea") {
          handleIdeaSubmit();
        } else if (currentStep === "questions") {
          handleAnalyze();
        }
      }
    },
    [currentStep, handleIdeaSubmit, handleAnalyze]
  );

  /**
   * Calculates completion progress as a percentage
   * @returns Progress percentage (0-100)
   */
  const getProgress = useCallback(() => {
    const totalQuestions = questions.length;
    const answeredQuestions = questions.filter(q => q.answered).length;
    return totalQuestions > 0 ? (answeredQuestions / totalQuestions) * 100 : 0;
  }, [questions]);

  /**
   * Determines if user can proceed to analysis based on required questions
   * @returns Boolean indicating if analysis can proceed
   */
  const canProceedToAnalysis = useCallback(() => {
    const requiredQuestions = questions.filter(q => q.required);
    const answeredRequired = requiredQuestions.filter(q => q.answered);
    return answeredRequired.length === requiredQuestions.length;
  }, [questions]);

  /**
   * Resets the entire flow to initial state
   * Implements proper cleanup and state management
   */
  const resetFlow = useCallback(() => {
    setCurrentStep("idea");
    setQuestions([]);
    setAnswers({});
    setAnalysisResults(null);
    setError(null);
    setIsGeneratingQuestions(false);
    setIsAnalyzing(false);

    // Reset focus to beginning
    businessIdeaRef.current?.focus();

    // Announce reset to screen readers
    announceToScreenReader("Form has been reset to start over");
  }, [announceToScreenReader]);

  /**
   * Gets appropriate button text based on loading state
   * @param isLoading - Current loading state
   * @param defaultText - Default button text
   * @returns Appropriate button text
   */
  const getButtonText = useCallback(
    (isLoading: boolean, defaultText: string) => {
      return isLoading ? defaultText : defaultText;
    },
    []
  );

  if (currentStep === "idea") {
    return (
      <Card className="w-full max-w-2xl mx-auto" role="main">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <div className="p-2 bg-blue-100 rounded-lg" aria-hidden="true">
              <FileText className="h-6 w-6 text-blue-600" />
            </div>
            <h1 className="scroll-margin-top-24">
              Market Mapper - Business Idea
            </h1>
          </CardTitle>
          <CardDescription>
            Describe your startup idea to begin comprehensive market analysis
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Error Alert with proper ARIA live region */}
          {error && (
            <Alert
              variant="destructive"
              role="alert"
              aria-live="polite"
              ref={firstErrorRef}
              tabIndex={-1}
            >
              <AlertCircle className="h-4 w-4" aria-hidden="true" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {/* Business Idea Input - Primary form field */}
          <div>
            <label
              htmlFor="businessIdea"
              className="block text-sm font-medium mb-2"
            >
              Business Idea *
            </label>
            <Textarea
              ref={businessIdeaRef}
              id="businessIdea"
              name="businessIdea"
              placeholder="Describe your business idea in detail. What problem does it solve? Who are your customers? What's your unique approach?"
              value={businessIdea}
              onChange={e => setBusinessIdea(e.target.value)}
              onKeyDown={handleKeyDown}
              rows={4}
              className="w-full text-base md:text-sm" // MUST: Mobile input font-size ≥16px
              aria-describedby="businessIdea-help businessIdea-count"
              aria-invalid={error ? "true" : "false"}
              autoComplete="off"
              spellCheck="false" // SHOULD: Disable spellcheck for business terms
            />

            {/* Character count and help text */}
            <div className="flex justify-between items-center mt-1">
              <div
                id="businessIdea-count"
                className={`text-xs ${
                  businessIdea.length < 10 ? "text-red-500" : "text-gray-500"
                }`}
                aria-live="polite"
              >
                {businessIdea.length < 10
                  ? `${10 - businessIdea.length} more characters needed`
                  : `${businessIdea.length} characters`}
              </div>
              <div id="businessIdea-help" className="text-xs text-gray-400">
                Minimum 10 characters
              </div>
            </div>
          </div>

          {/* Optional fields - Industry and Target Market */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label
                htmlFor="industry"
                className="block text-sm font-medium mb-2"
              >
                Industry (Optional)
              </label>
              <Input
                id="industry"
                name="industry"
                placeholder="e.g., SaaS, E-commerce, FinTech…"
                value={industry}
                onChange={e => setIndustry(e.target.value)}
                onKeyDown={handleKeyDown}
                className="text-base md:text-sm" // MUST: Mobile input font-size ≥16px
                autoComplete="organization"
                spellCheck="false"
              />
            </div>

            <div>
              <label
                htmlFor="targetMarket"
                className="block text-sm font-medium mb-2"
              >
                Target Market (Optional)
              </label>
              <Input
                id="targetMarket"
                name="targetMarket"
                placeholder="e.g., Small businesses, Consumers…"
                value={targetMarket}
                onChange={e => setTargetMarket(e.target.value)}
                onKeyDown={handleKeyDown}
                className="text-base md:text-sm" // MUST: Mobile input font-size ≥16px
                autoComplete="off"
                spellCheck="false"
              />
            </div>
          </div>

          {/* Submit Button with proper loading state and accessibility */}
          <Button
            ref={submitButtonRef}
            onClick={handleIdeaSubmit}
            disabled={
              !businessIdea.trim() ||
              businessIdea.trim().length < 10 ||
              isGeneratingQuestions ||
              isLoading
            }
            className="w-full min-h-[44px] touch-manipulation" // MUST: Hit target ≥44px on mobile
            aria-describedby={
              businessIdea.trim().length < 10 ? "businessIdea-count" : undefined
            }
            type="submit"
          >
            {/* MUST: Loading buttons show spinner and keep original label */}
            {isGeneratingQuestions || isLoading ? (
              <>
                <Loader2
                  className="mr-2 h-4 w-4 animate-spin"
                  aria-hidden="true"
                />
                Generate Clarification Questions
              </>
            ) : (
              <>
                Generate Clarification Questions
                <ArrowRight className="ml-2 h-4 w-4" aria-hidden="true" />
              </>
            )}
          </Button>

          {isLoading && (
            <div className="mt-4 p-4 bg-blue-50 rounded-lg border border-blue-200">
              <div className="flex items-center gap-3">
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600"></div>
                <div className="text-sm text-blue-800">
                  <p className="font-medium">AI Agent is working...</p>
                  <p className="text-blue-600">
                    Generating personalized questions based on your business
                    idea
                  </p>
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    );
  }

  if (currentStep === "questions") {
    return (
      <div className="w-full max-w-4xl mx-auto space-y-6">
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle>Clarification Questions</CardTitle>
                <CardDescription>
                  Answer these questions to provide deeper market insights
                </CardDescription>
              </div>
              <Button variant="outline" size="sm" onClick={resetFlow}>
                <RotateCcw className="h-4 w-4 mr-2" />
                Start Over
              </Button>
            </div>
            <div className="space-y-2">
              <div className="flex justify-between text-sm text-gray-600">
                <span>
                  Progress: {questions.filter(q => q.answered).length} of{" "}
                  {questions.length} answered
                </span>
                <span>{Math.round(getProgress())}% complete</span>
              </div>
              <Progress value={getProgress()} className="w-full" />
            </div>
          </CardHeader>
        </Card>

        {error && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <div className="space-y-4">
          {questions?.length === 0 ? (
            <Card>
              <CardHeader>
                <CardTitle className="text-center text-gray-500">
                  No questions generated
                </CardTitle>
                <CardDescription className="text-center">
                  Please try again or provide more details about your business
                  idea.
                </CardDescription>
              </CardHeader>
            </Card>
          ) : (
            questions
              ?.filter(q => q && q.id && q.question && q.type)
              ?.map((question, index) => (
                <Card
                  key={question.id}
                  className={`transition-all ${
                    question.answered ? "border-green-200 bg-green-50/30" : ""
                  }`}
                >
                  <CardHeader className="pb-3">
                    <div className="flex items-start gap-3">
                      <div className="mt-1">
                        {question.answered ? (
                          <CheckCircle className="h-5 w-5 text-green-600" />
                        ) : (
                          <Circle className="h-5 w-5 text-gray-400" />
                        )}
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-2">
                          <span className="text-sm font-medium text-gray-500">
                            Question {index + 1}
                          </span>
                          {question.required && (
                            <Badge variant="secondary" className="text-xs">
                              Required
                            </Badge>
                          )}
                          <Badge
                            variant="outline"
                            className="text-xs capitalize"
                          >
                            {question.type?.replace("_", " ") || "General"}
                          </Badge>
                        </div>
                        <h3 className="font-medium text-gray-900 mb-3">
                          {question.question}
                        </h3>
                        <Textarea
                          placeholder="Enter your answer here..."
                          value={answers[question.id] || ""}
                          onChange={e =>
                            handleAnswerChange(question.id, e.target.value)
                          }
                          rows={3}
                          className="w-full"
                        />
                      </div>
                    </div>
                  </CardHeader>
                </Card>
              ))
          )}
        </div>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div className="text-sm text-gray-600">
                {canProceedToAnalysis() ? (
                  <span className="text-green-600 font-medium">
                    ✓ Ready for analysis
                  </span>
                ) : (
                  <span>Please answer all required questions to proceed</span>
                )}
              </div>
              <Button
                onClick={handleAnalyze}
                disabled={!canProceedToAnalysis() || isLoading}
                size="lg"
              >
                {isLoading ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    AI is analyzing market...
                  </>
                ) : (
                  <>
                    Generate Market Analysis
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </>
                )}
              </Button>
            </div>

            {isLoading && (
              <div className="mt-4 p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg border border-blue-200">
                <div className="flex items-center gap-3">
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600"></div>
                  <div className="text-sm">
                    <p className="font-medium text-blue-900">
                      Market Mapper AI is working hard...
                    </p>
                    <p className="text-blue-700">
                      Analyzing market trends, competitors, and opportunities
                      based on your responses
                    </p>
                  </div>
                </div>
                <div className="mt-3 space-y-1">
                  <div className="flex items-center gap-2 text-xs text-blue-600">
                    <div className="w-2 h-2 bg-blue-600 rounded-full animate-pulse"></div>
                    Processing your business insights
                  </div>
                  <div className="flex items-center gap-2 text-xs text-blue-600">
                    <div
                      className="w-2 h-2 bg-blue-600 rounded-full animate-pulse"
                      style={{ animationDelay: "0.5s" }}
                    ></div>
                    Researching market opportunities
                  </div>
                  <div className="flex items-center gap-2 text-xs text-blue-600">
                    <div
                      className="w-2 h-2 bg-blue-600 rounded-full animate-pulse"
                      style={{ animationDelay: "1s" }}
                    ></div>
                    Generating strategic recommendations
                  </div>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    );
  }

  // Analysis results view will be implemented in the results component
  return null;
}
