"use client";

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { MarketMapperOutput } from "@/lib/agents/market-mapper";
import {
  FileText,
  Users,
  TrendingUp,
  Target,
  Lightbulb,
  CheckSquare,
  Download,
  RotateCcw,
  Edit,
} from "lucide-react";

interface MarketMapperResultsProps {
  results: MarketMapperOutput;
  onEdit?: () => void;
  onRegenerate?: () => void;
}

export function MarketMapperResults({
  results,
  onEdit,
  onRegenerate,
}: MarketMapperResultsProps) {
  const getPriorityColor = (priority: "high" | "medium" | "low") => {
    switch (priority) {
      case "high":
        return "bg-red-100 text-red-800";
      case "medium":
        return "bg-yellow-100 text-yellow-800";
      case "low":
        return "bg-green-100 text-green-800";
    }
  };

  const exportResults = () => {
    // Create a formatted text report
    const reportText = `
MARKET ANALYSIS REPORT
======================
Generated on: ${new Date().toLocaleDateString()}

${results.executiveSummary ? `
EXECUTIVE SUMMARY
-----------------
${results.executiveSummary}
` : ''}

${results.marketOpportunity ? `
MARKET OPPORTUNITY
------------------
Market Size: ${results.marketOpportunity.size}
Growth Potential: ${results.marketOpportunity.growth}
${results.marketOpportunity.trends ? `
Key Trends:
${results.marketOpportunity.trends.map(trend => `â€¢ ${trend}`).join('\n')}
` : ''}
` : ''}

${results.targetAudience && results.targetAudience.length > 0 ? `
TARGET AUDIENCE
---------------
${results.targetAudience.map((segment, index) => `
${index + 1}. ${segment.segment}
   ${segment.size ? `Market Size: ${segment.size}` : ''}
   Pain Points:
   ${segment.pain_points.map(pain => `   â€¢ ${pain}`).join('\n')}
   ${segment.characteristics ? `
   Characteristics:
   ${segment.characteristics.map(char => `   â€¢ ${char}`).join('\n')}` : ''}
`).join('\n')}
` : ''}

${results.positioning ? `
MARKET POSITIONING
------------------
Unique Selling Proposition: ${results.positioning.usp}
${results.positioning.valueProposition ? `
Value Proposition: ${results.positioning.valueProposition}
` : ''}
Differentiation Strategies:
${results.positioning.differentiation.map(diff => `â€¢ ${diff}`).join('\n')}
` : ''}

${results.competitors && results.competitors.length > 0 ? `
COMPETITIVE LANDSCAPE
---------------------
${results.competitors.map((competitor, index) => `
${index + 1}. ${competitor.name} ${competitor.marketPosition ? `(${competitor.marketPosition})` : ''}
   Strengths:
   ${competitor.strengths.map(strength => `   â€¢ ${strength}`).join('\n')}
   Weaknesses:
   ${competitor.weaknesses.map(weakness => `   â€¢ ${weakness}`).join('\n')}
`).join('\n')}
` : ''}

${results.recommendations && results.recommendations.length > 0 ? `
STRATEGIC RECOMMENDATIONS
-------------------------
${results.recommendations.map((rec, index) => `
${index + 1}. ${rec.action} (${rec.priority.toUpperCase()} PRIORITY)
   ${rec.reasoning ? `Reasoning: ${rec.reasoning}` : ''}
`).join('\n')}
` : ''}

---
Report generated by LaunchPad Market Mapper
    `;

    // Create and download the formatted report
    const dataBlob = new Blob([reportText], { type: "text/plain" });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `market-analysis-report-${new Date().toISOString().split('T')[0]}.txt`;
    link.click();
    
    // Also create JSON export as backup
    const jsonStr = JSON.stringify(results, null, 2);
    const jsonBlob = new Blob([jsonStr], { type: "application/json" });
    const jsonUrl = URL.createObjectURL(jsonBlob);
    const jsonLink = document.createElement("a");
    jsonLink.href = jsonUrl;
    jsonLink.download = `market-analysis-data-${new Date().toISOString().split('T')[0]}.json`;
    
    // Clean up URLs
    setTimeout(() => {
      URL.revokeObjectURL(url);
      URL.revokeObjectURL(jsonUrl);
    }, 100);
  };

  return (
    <div className="w-full max-w-6xl mx-auto space-y-6">
      {/* Header Actions */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <Target className="h-6 w-6 text-blue-600" />
                </div>
                Market Analysis Results
              </CardTitle>
              <CardDescription>
                Comprehensive market insights and strategic recommendations
              </CardDescription>
            </div>
            <div className="flex gap-2">
              <Button variant="outline" size="sm" onClick={exportResults}>
                <Download className="h-4 w-4 mr-2" />
                Export Report
              </Button>
              {onEdit && (
                <Button variant="outline" size="sm" onClick={onEdit}>
                  <Edit className="h-4 w-4 mr-2" />
                  Edit
                </Button>
              )}
              {onRegenerate && (
                <Button variant="outline" size="sm" onClick={onRegenerate}>
                  <RotateCcw className="h-4 w-4 mr-2" />
                  Regenerate
                </Button>
              )}
            </div>
          </div>
        </CardHeader>
      </Card>

      {/* Comprehensive Market Analysis Report */}
      <Card className="border-2 border-blue-200 bg-gradient-to-br from-blue-50 to-indigo-50">
        <CardHeader className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-t-lg">
          <CardTitle className="flex items-center gap-2 text-xl">
            <div className="p-2 bg-white/20 rounded-lg">
              <FileText className="h-6 w-6" />
            </div>
            ðŸ“Š Market Analysis Report
          </CardTitle>
          <CardDescription className="text-blue-100">
            Complete market intelligence for your business idea
          </CardDescription>
        </CardHeader>
        <CardContent className="p-8">
          {/* Executive Summary */}
          {results.executiveSummary && (
            <div className="mb-8">
              <h3 className="text-xl font-bold text-gray-900 mb-4 flex items-center gap-2">
                <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                  <span className="text-blue-600 font-bold">ðŸ“‹</span>
                </div>
                Executive Summary
              </h3>
              <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                <p className="text-gray-700 leading-relaxed text-lg whitespace-pre-line">
                  {results.executiveSummary}
                </p>
              </div>
            </div>
          )}

          {/* Key Insights Grid */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
            {/* Market Opportunity Highlight */}
            {results.marketOpportunity && (
              <div className="bg-gradient-to-br from-green-50 to-emerald-50 p-6 rounded-lg border border-green-200">
                <h4 className="text-lg font-bold text-green-900 mb-3 flex items-center gap-2">
                  <TrendingUp className="h-5 w-5" />
                  ðŸ’° Market Opportunity
                </h4>
                <div className="space-y-2">
                  <div className="text-green-800">
                    <span className="font-semibold">Market Size:</span> {results.marketOpportunity.size}
                  </div>
                  <div className="text-green-800">
                    <span className="font-semibold">Growth:</span> {results.marketOpportunity.growth}
                  </div>
                </div>
              </div>
            )}

            {/* Target Audience Highlight */}
            {results.targetAudience && results.targetAudience.length > 0 && (
              <div className="bg-gradient-to-br from-purple-50 to-violet-50 p-6 rounded-lg border border-purple-200">
                <h4 className="text-lg font-bold text-purple-900 mb-3 flex items-center gap-2">
                  <Users className="h-5 w-5" />
                  ðŸŽ¯ Primary Target
                </h4>
                <div className="text-purple-800">
                  <div className="font-semibold text-lg">{results.targetAudience[0].segment}</div>
                  <div className="text-sm mt-1">
                    Key Pain: {results.targetAudience[0].pain_points[0]}
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Positioning Statement */}
          {results.positioning && (
            <div className="bg-gradient-to-r from-yellow-50 to-orange-50 p-6 rounded-lg border border-yellow-200 mb-8">
              <h4 className="text-lg font-bold text-orange-900 mb-3 flex items-center gap-2">
                <Lightbulb className="h-5 w-5" />
                ðŸ’¡ Your Unique Position
              </h4>
              <div className="text-orange-800 text-lg font-medium">
                {results.positioning.usp}
              </div>
              {results.positioning.valueProposition && (
                <div className="text-orange-700 mt-2">
                  {results.positioning.valueProposition}
                </div>
              )}
            </div>
          )}

          {/* Top Recommendations */}
          {results.recommendations && results.recommendations.length > 0 && (
            <div className="bg-gradient-to-br from-red-50 to-pink-50 p-6 rounded-lg border border-red-200">
              <h4 className="text-lg font-bold text-red-900 mb-4 flex items-center gap-2">
                <CheckSquare className="h-5 w-5" />
                ðŸš€ Priority Actions
              </h4>
              <div className="space-y-3">
                {results.recommendations
                  .filter(rec => rec.priority === 'high')
                  .slice(0, 3)
                  .map((rec, index) => (
                    <div key={index} className="flex items-start gap-3 bg-white p-4 rounded-lg shadow-sm">
                      <div className="w-6 h-6 bg-red-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                        <span className="text-red-600 font-bold text-sm">{index + 1}</span>
                      </div>
                      <div>
                        <div className="font-semibold text-red-900">{rec.action}</div>
                        {rec.reasoning && (
                          <div className="text-red-700 text-sm mt-1">{rec.reasoning}</div>
                        )}
                      </div>
                    </div>
                  ))}
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Executive Summary */}
      {results.executiveSummary && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <FileText className="h-5 w-5" />
              Executive Summary
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="prose prose-sm max-w-none">
              <p className="text-gray-700 leading-relaxed whitespace-pre-line">
                {results.executiveSummary}
              </p>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Target Audience */}
      {results.targetAudience && results.targetAudience.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Users className="h-5 w-5" />
              Target Audience
            </CardTitle>
            <CardDescription>
              Key customer segments and their pain points
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid gap-4">
              {results.targetAudience.map((segment, index) => (
                <div key={index} className="p-4 border rounded-lg bg-gray-50">
                  <div className="flex items-start justify-between mb-3">
                    <h3 className="font-semibold text-gray-900">
                      {segment.segment}
                    </h3>
                    {segment.size && (
                      <Badge variant="outline">{segment.size}</Badge>
                    )}
                  </div>

                  <div className="space-y-3">
                    <div>
                      <h4 className="text-sm font-medium text-gray-700 mb-2">
                        Pain Points:
                      </h4>
                      <ul className="space-y-1">
                        {segment.pain_points.map((pain, idx) => (
                          <li
                            key={idx}
                            className="text-sm text-gray-600 flex items-start gap-2"
                          >
                            <span className="text-red-500 mt-1">â€¢</span>
                            {pain}
                          </li>
                        ))}
                      </ul>
                    </div>

                    {segment.characteristics &&
                      segment.characteristics.length > 0 && (
                        <div>
                          <h4 className="text-sm font-medium text-gray-700 mb-2">
                            Characteristics:
                          </h4>
                          <div className="flex flex-wrap gap-2">
                            {segment.characteristics.map((char, idx) => (
                              <Badge
                                key={idx}
                                variant="secondary"
                                className="text-xs"
                              >
                                {char}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      )}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Market Opportunity */}
      {results.marketOpportunity && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="h-5 w-5" />
              Market Opportunity
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div className="p-4 bg-blue-50 rounded-lg">
                  <h3 className="font-semibold text-blue-900 mb-2">
                    Market Size
                  </h3>
                  <p className="text-blue-800">
                    {results.marketOpportunity.size}
                  </p>
                </div>
                <div className="p-4 bg-green-50 rounded-lg">
                  <h3 className="font-semibold text-green-900 mb-2">
                    Growth Potential
                  </h3>
                  <p className="text-green-800">
                    {results.marketOpportunity.growth}
                  </p>
                </div>
              </div>

              {results.marketOpportunity.trends &&
                results.marketOpportunity.trends.length > 0 && (
                  <div>
                    <h3 className="font-semibold text-gray-900 mb-3">
                      Key Trends
                    </h3>
                    <ul className="space-y-2">
                      {results.marketOpportunity.trends.map((trend, idx) => (
                        <li
                          key={idx}
                          className="text-sm text-gray-700 flex items-start gap-2"
                        >
                          <TrendingUp className="h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0" />
                          {trend}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Competitors */}
      {results.competitors && results.competitors.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="h-5 w-5" />
              Competitive Landscape
            </CardTitle>
            <CardDescription>
              Key competitors and market positioning
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {results.competitors.map((competitor, index) => (
                <div key={index} className="p-4 border rounded-lg">
                  <div className="flex items-start justify-between mb-3">
                    <h3 className="font-semibold text-gray-900">
                      {competitor.name}
                    </h3>
                    {competitor.marketPosition && (
                      <Badge variant="outline">
                        {competitor.marketPosition}
                      </Badge>
                    )}
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <h4 className="text-sm font-medium text-green-700 mb-2">
                        Strengths
                      </h4>
                      <ul className="space-y-1">
                        {competitor.strengths.map((strength, idx) => (
                          <li
                            key={idx}
                            className="text-sm text-gray-600 flex items-start gap-2"
                          >
                            <span className="text-green-500 mt-1">+</span>
                            {strength}
                          </li>
                        ))}
                      </ul>
                    </div>

                    <div>
                      <h4 className="text-sm font-medium text-red-700 mb-2">
                        Weaknesses
                      </h4>
                      <ul className="space-y-1">
                        {competitor.weaknesses.map((weakness, idx) => (
                          <li
                            key={idx}
                            className="text-sm text-gray-600 flex items-start gap-2"
                          >
                            <span className="text-red-500 mt-1">-</span>
                            {weakness}
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Positioning */}
      {results.positioning && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Lightbulb className="h-5 w-5" />
              Market Positioning
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="p-4 bg-yellow-50 rounded-lg">
                <h3 className="font-semibold text-yellow-900 mb-2">
                  Unique Selling Proposition
                </h3>
                <p className="text-yellow-800">{results.positioning.usp}</p>
              </div>

              {results.positioning.valueProposition && (
                <div className="p-4 bg-purple-50 rounded-lg">
                  <h3 className="font-semibold text-purple-900 mb-2">
                    Value Proposition
                  </h3>
                  <p className="text-purple-800">
                    {results.positioning.valueProposition}
                  </p>
                </div>
              )}

              <div>
                <h3 className="font-semibold text-gray-900 mb-3">
                  Differentiation Strategies
                </h3>
                <div className="grid gap-2">
                  {results.positioning.differentiation.map((diff, idx) => (
                    <div
                      key={idx}
                      className="flex items-start gap-2 p-2 bg-gray-50 rounded"
                    >
                      <CheckSquare className="h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0" />
                      <span className="text-sm text-gray-700">{diff}</span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Recommendations */}
      {results.recommendations && results.recommendations.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CheckSquare className="h-5 w-5" />
              Strategic Recommendations
            </CardTitle>
            <CardDescription>
              Prioritized action items for market validation and entry
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {results.recommendations.map((rec, index) => (
                <div key={index} className="p-4 border rounded-lg">
                  <div className="flex items-start justify-between mb-2">
                    <h3 className="font-medium text-gray-900 flex-1">
                      {rec.action}
                    </h3>
                    <Badge className={getPriorityColor(rec.priority)}>
                      {rec.priority} priority
                    </Badge>
                  </div>
                  {rec.reasoning && (
                    <p className="text-sm text-gray-600 mt-2">
                      {rec.reasoning}
                    </p>
                  )}
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
